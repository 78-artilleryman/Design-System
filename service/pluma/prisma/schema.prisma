generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(dbgenerated("gen_random_uuid()"))
  userid                   Int?
  type                     String  @db.VarChar(255)
  provider                 String  @db.VarChar(255)
  provideraccountid        String? @db.VarChar(255)
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String? @db.VarChar(255)
  scope                    String? @db.VarChar(255)
  id_token                 String?
  session_state            String?
  User                     User?   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provideraccountid])
}

model File {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  path       String
  content    String?
  folderid   Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  Folder     Folder?   @relation(fields: [folderid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Folder {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  novelid    Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  File       File[]
  Novel      Novel?    @relation(fields: [novelid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Novel {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  userid      Int?
  Folder      Folder[]
  User        User?    @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessiontoken String   @unique @db.VarChar(255)
  userid       Int?
  expires      DateTime @db.Timestamptz(6)
  User         User?    @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  name          String?   @db.VarChar(255)
  emailverified DateTime? @db.Timestamptz(6)
  image         String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  Account       Account[]
  Novel         Novel[]
  Session       Session[]
}
